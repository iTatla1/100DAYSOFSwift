{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red13\green0\blue129;\red235\green236\blue237;\red36\green38\blue41;
\red37\green127\blue159;\red104\green26\blue29;\red114\green121\blue129;}
{\*\expandedcolortbl;;\cssrgb\c6275\c6275\c58039;\cssrgb\c93725\c94118\c94510;\cssrgb\c18824\c20000\c21176;
\cssrgb\c16863\c56863\c68627;\cssrgb\c49020\c15294\c15294;\cssrgb\c52157\c54902\c57647;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs26 \cf2 \cb3 \expnd0\expndtw0\kerning0
extension\cf4  \cf5 CAShapeLayer\cf4  \{\
    \cf2 func\cf4  drawCircleAtLocation(location: \cf5 CGPoint\cf4 , withRadius radius: \cf5 CGFloat\cf4 , andColor color: \cf5 UIColor\cf4 , filled: \cf5 Bool\cf4 ) \{\
        fillColor = filled ? color.cgColor : \cf5 UIColor\cf4 .white.cgColor\
        strokeColor = color.cgColor\
        \cf2 let\cf4  origin = \cf5 CGPoint\cf4 (x: location.x - radius, y: location.y - radius)\
        path = \cf5 UIBezierPath\cf4 (ovalIn: \cf5 CGRect\cf4 (origin: origin, size: \cf5 CGSize\cf4 (width: radius * \cf6 2\cf4 , height: radius * \cf6 2\cf4 ))).cgPath\
    \}\
\}\
\
\cf2 private\cf4  \cf2 var\cf4  handle: \cf5 UInt8\cf4  = \cf6 0\cf4 \
\
\cf2 extension\cf4  \cf5 UIBarButtonItem\cf4  \{\
    \cf2 private\cf4  \cf2 var\cf4  badgeLayer: \cf5 CAShapeLayer\cf4 ? \{\
        \cf2 if\cf4  \cf2 let\cf4  b: \cf5 AnyObject\cf4  = objc_getAssociatedObject(\cf2 self\cf4 , &handle) \cf2 as\cf4  \cf5 AnyObject\cf4 ? \{\
            \cf2 return\cf4  b \cf2 as\cf4 ? \cf5 CAShapeLayer\cf4 \
        \} \cf2 else\cf4  \{\
            \cf2 return\cf4  \cf6 nil\cf4 \
        \}\
    \}\
\
    \cf2 func\cf4  addBadge(number: \cf5 Int\cf4 , withOffset offset: \cf5 CGPoint\cf4  = \cf5 CGPoint\cf4 .zero, andColor color: \cf5 UIColor\cf4  = \cf5 UIColor\cf4 .red, andFilled filled: \cf5 Bool\cf4  = \cf6 true\cf4 ) \{\
        \cf2 guard\cf4  \cf2 let\cf4  view = \cf2 self\cf4 .value(forKey: \cf6 "view"\cf4 ) \cf2 as\cf4 ? \cf5 UIView\cf4  \cf2 else\cf4  \{ \cf2 return\cf4  \}\
\
        badgeLayer?.removeFromSuperlayer()\
\
        \cf7 // Initialize Badge\
\cf4         \cf2 let\cf4  badge = \cf5 CAShapeLayer\cf4 ()\
        \cf2 let\cf4  radius = \cf5 CGFloat\cf4 (\cf6 7\cf4 )\
        \cf2 let\cf4  location = \cf5 CGPoint\cf4 (x: view.frame.width - (radius + offset.x), y: (radius + offset.y))\
        badge.drawCircleAtLocation(location: location, withRadius: radius, andColor: color, filled: filled)\
        view.layer.addSublayer(badge)\
\
        \cf7 // Initialiaze Badge's label\
\cf4         \cf2 let\cf4  label = \cf5 CATextLayer\cf4 ()\
        label.string = \cf6 "\\(number)"\cf4 \
        label.alignmentMode = kCAAlignmentCenter\
        label.fontSize = \cf6 11\cf4 \
        label.frame = \cf5 CGRect\cf4 (origin: \cf5 CGPoint\cf4 (x: location.x - \cf6 4\cf4 , y: offset.y), size: \cf5 CGSize\cf4 (width: \cf6 8\cf4 , height: \cf6 16\cf4 ))\
        label.foregroundColor = filled ? \cf5 UIColor\cf4 .white.cgColor : color.cgColor\
        label.backgroundColor = \cf5 UIColor\cf4 .clear.cgColor\
        label.contentsScale = \cf5 UIScreen\cf4 .main.scale\
        badge.addSublayer(label)\
\
        \cf7 // Save Badge as UIBarButtonItem property\
\cf4         objc_setAssociatedObject(\cf2 self\cf4 , &handle, badge, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)\
    \}\
\
    \cf2 func\cf4  updateBadge(number: \cf5 Int\cf4 ) \{\
        \cf2 if\cf4  \cf2 let\cf4  text = badgeLayer?.sublayers?.filter(\{ $\cf6 0\cf4  \cf2 is\cf4  \cf5 CATextLayer\cf4  \}).first \cf2 as\cf4 ? \cf5 CATextLayer\cf4  \{\
            text.string = \cf6 "\\(number)"\cf4 \
        \}\
    \}\
\
    \cf2 func\cf4  removeBadge() \{\
        badgeLayer?.removeFromSuperlayer()\
    \}\
\}}